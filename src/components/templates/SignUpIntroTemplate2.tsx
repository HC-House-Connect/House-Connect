import { FormProvider, useForm, SubmitHandler } from 'react-hook-form';
import { useRecoilState, useRecoilValue} from 'recoil';

import { SignUpEmailUserAtom, ShowVerificationAtom } from '@/stores/sign.store';
import { EmailAuthType } from '@/types/auth.type';
import Button from '@/components/atoms/Button';
import Container from '@/components/atoms/Container';
import Typography from '@/components/atoms/Typography';
import FormItem from '@/components/molecules/FormItem';
import { useSignUpEmail, useVerifyEmail } from '@/hooks/useSign';

export default function SignUpIntroTemplate2() {
  const Form = FormProvider;
  // TODO: resolverÎ•º ÎÇòÏ§ëÏóê ÎßåÎì§Ïñ¥ÏÑú useFormÏóê Ï∂îÍ∞Ä
  const form = useForm<EmailAuthType>();
  const showVerification = useRecoilValue(ShowVerificationAtom);
  const [signUpEmailUser, setSignUpEmailUser] =
    useRecoilState(SignUpEmailUserAtom);

  const { signUpEmail, isSignUpEmail } = useSignUpEmail();
  const { verifyEmail, isVerifyEmail } = useVerifyEmail({
    mutateMessage: 'Ïù∏Ï¶ù Ï§ëÏûÖÎãàÎã§.',
    successMessage: 'üéâÏù∏Ï¶ùÏÑ±Í≥µ! ÌöåÏõêÍ∞ÄÏûÖ ÎêòÏÖ®ÏäµÎãàÎã§!',
  });

  const isPending = isSignUpEmail || isVerifyEmail;

  const onSubmitSignUp = async (formData: EmailAuthType) => {
    console.log(formData);
    if (signUpEmailUser.birth !== 0 && signUpEmailUser.gender !== 0) {
      setSignUpEmailUser(prev => ({
        ...prev,
        email: formData.email,
        password: formData.password,
      }))
	signUpEmail();
    }
  };

  const onSubmitVerify = async (formData: EmailAuthType) => {
    verifyEmail(formData);
  };

  const onSubmit: SubmitHandler<EmailAuthType> = !showVerification
    ? onSubmitSignUp
    : onSubmitVerify;

  return (
    <Container.FlexCol className="min-w-full flex-1 gap-[3.25rem]">
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)}>
          <Container.FlexCol className="gap-[1.625rem]">
            <FormItem.TextField
              labelName="Ïù¥Î©îÏùº"
              type="text"
              name="email"
              options={{
                required: 'ÌïÑÏàò Ìï≠Î™© ÏûÖÎãàÎã§.',
                pattern: {
                  value: /^([a-z0-9_.-]+)@([\da-z.-]+)\.([a-z.]{2,6})$/,
                  message: 'Ïù¥Î©îÏùº ÌòïÏãùÏúºÎ°ú ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.',
                },
              }}
              placeholder="Ïù¥Î©îÏùº ÏûÖÎ†•"
            />
            <FormItem.TextField
              labelName="ÎπÑÎ∞ÄÎ≤àÌò∏"
              type="password"
              name="password"
              options={{
                required: 'ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.',
                minLength: {
                  value: 8,
                  message:
                    'ÏòÅÎ¨∏, Ïà´Ïûê, ÌäπÏàòÍ∏∞Ìò∏Î•º Ìè¨Ìï®ÌïòÏó¨ 8ÏûêÎ¶¨ Ïù¥ÏÉÅ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.',
                },
                pattern: {
                  value: /^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,15}$/,
                  message:
                    'ÏòÅÎ¨∏, Ïà´Ïûê, ÌäπÏàòÍ∏∞Ìò∏Î•º Ìè¨Ìï®ÌïòÏó¨ 8ÏûêÎ¶¨ Ïù¥ÏÉÅ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.',
                },
              }}
              placeholder="ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûÖÎ†•"
            />
            <FormItem.TextField
              labelName="ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏûÖÎ†•"
              type="password"
              name="confirmPassword"
              options={{
                required: 'ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
                validate: {
                  confirmPassword: value => {
                    const { password } = form.getValues();
                    return (
                      password === value || 'ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.'
                    );
                  },
                },
              }}
              placeholder="ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûÖÎ†•"
            />
          </Container.FlexCol>
          {showVerification ? (
            <>
              <FormItem.TextField
                labelName="Ïù∏Ï¶ùÎ≤àÌò∏"
                type="text"
                name="token"
                options={{ required: 'Ïù∏Ï¶ùÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.' }}
                placeholder="Ïù∏Ï¶ùÎ≤àÌò∏ ÏûÖÎ†•"
                containerStyle="mt-[1.625rem]"
              />
              <Button.Fill
                type="submit"
                className="mt-[3.25rem] w-full rounded-[10px]"
                disabled={isPending}
              >
                <Typography.P3 className="mx-auto my-[1rem] text-[#F4E7DB]">
                  Ïù∏Ï¶ù ÏöîÏ≤≠
                </Typography.P3>
              </Button.Fill>
            </>
          ) : (
            <Button.Fill
              type="submit"
              className="mt-[3.25rem] w-full rounded-[10px]"
              disabled={isPending}
            >
              <Typography.P3 className="mx-auto my-[1rem] text-[#F4E7DB]">
                ÌôïÏù∏
              </Typography.P3>
            </Button.Fill>
          )}
        </form>
      </Form>
    </Container.FlexCol>
  );
}
